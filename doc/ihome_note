1.前后端分离
    缺点对于搜索，需要搜索SEO，如何将关键词与网站更紧密将搜索排名提前。
    为了推广，需要将让网络爬虫爬取（网络中搜索引擎爬虫）的页面，进行前后端不分离方式重写。

2.Flask-session
    文档连接：https://pythonhosted.org/Flask-Session/
    在配置类中添加相关参数。

3.日志logging

4.数据库表，根据页面逻辑，搜索条件，空间换时间便捷性 设计表。

5.csrf防护机制
    client --- post/put/delete ---> server

    cookie:                     csrf验证机制：
      csrf_token:xxx            从cookie中获取一个csrf_token,
    body:                       从请求体重获取一个csrf_token的值，
      csrf_token:xxx            如果两个值相同，则检验通过，可以进入到视图函数执行，
                                如果不同，则检验失败，会向前端返回400的错误。
    登录时
    获得server的csrf_token

                POST:
                cookies:user_id=123
                        csrf_token=xxx
                body:to_user=hack
                money:1000
                csrf_token:xxx

6.验证码
    client                                   server                       redis
    编号    ----发起获取图片验证码的请求--->   生成验证码图片，编号
            <---返回验证码图片，编号----      将验证码的真实值和编号存到redis

           ---发起获取短信验证码请求---->      验证图片验证码的正确性
                携带参数：                   若正确，发送短信验证码
                    用户填写的图片验证码
                    图片验证码的编号

    2.编号
        时间戳
        uuid 全局唯一标识符

7.
    1.需求分析
    2.编写代码
    3.编写单元测试
    4.自测
    5.编写接口文档
    6.检测代码

8.云通信
    1.容联云通信 申请短信服务
    2.单例模式
        class CCP(object):
            """自己封装的发送短信的辅助类"""
            # 用来保存对象的类属性
            instance = None

            def __new__(cls):
                # 判断CCP类有没有已经创建好的对象，如果没有，创建一个对象，并且保存
                # 如果有，则将保存的对象直接返回
                if cls.instance is None:
                    obj = super(CCP, cls).__new__(cls)

                    # 初始化REST SDK
                    obj.rest = REST(serverIP, serverPort, softVersion)
                    obj.rest.setAccount(accountSid, accountToken)
                    obj.rest.setAppId(appId)

                    cls.instance = obj

                return cls.instance

            def send_template_sms(self, to, datas, temp_id):
                """"""
                result = self.rest.sendTemplateSMS(to, datas, temp_id)
                # for k, v in result.iteritems():
                #
                #     if k == 'templateSMS':
                #         for k, s in v.iteritems():
                #             print '%s:%s' % (k, s)
                #     else:
                #         print '%s:%s' % (k, v)
                # smsMessageSid:ff75e0f84f05445ba08efdd0787ad7d0
                # dateCreated:20171125124726
                # statusCode:000000
                status_code = result.get("statusCode")
                if status_code == "000000":
                    # 表示发送短信成功
                    return 0
                else:
                    # 发送失败
                    return -1


        if __name__ == '__main__':
            ccp = CCP()
            ret = ccp.send_template_sms("18516952650", ["1234", "5"], 1)
            print(ret)

9.redis 文档
    http://redisdoc.com/index.html


10.图片服务
    会遇到的问题：
    1.保存到本地，扩容（磁盘满问题）
    2.备份的问题
    3.多机存储问题
    4.当图a 与 图b 是同一张图片，会保存两次，浪费空间
    5.同名图片，但不是同一张，后上传的会覆盖掉之前的内容

    文件存储解决方案：
    1.自己搭建文件存储系统    FastDFS 快速分布式文件存储系统     HDFS  hadoop分布式文件系统
    2.选择第三方服务   七牛云存储


11.缓存机制
    1.当请求的时候，首先从redis去取数据，如果没有，就去MySQL调用，并写入redis中。
    2.为了同步，redis中数据必须设置有效期；如果从MySQL读取数据，也要重新写入redis中。


12.前段js模版 art-template 共性能javascript模版引擎

13.celery
    任务队列是一种跨线程、跨机器工作的一种机制，任务队列包含称作任务的工作单元，有专门的工作进程持续不断的监视任务队列，并从中获得新的任务并处理
    celery通过消息进行通信
    clients发送消息到队列中，broker将队列中的信息派发给worker来处理

    client     ---->      任务队列broker           <---- 任务处理者worker                            存放数据Beckend
    (发布任务方flask)     （rabbitMQ redis）        （多进程(默认) 协程gevent greenlet）---(处理结果)---> MySQL redis

    开启celery worker 命令：
    celery -A 定义任务的python模块 worker -l

14.DB
    1. 分析需求
    2. 编写代码
    3. 编写单元测试
    4. 自测
    5. 编写接口文档
    6. 提测代码


    1. 发送短信服务

    容联云  云通讯
    www.yuntongxun.com

    2. redis文档
    http://redis-py.readthedocs.io/en/latest/#indices-and-tables
    http://redisdoc.com/index.html


    3. 图片服务

    1）保存到程序本地，扩容（磁盘满的问题）
    2）备份的问题
    3）多机存储的问题
    4） 用户A    图片A
        用户B    图片B
        图片A 与 图片B 是同一张图片，会保存两次，浪费空间

    5）用户A     a.jpg
       用户B     a.jpg
       同名图片，但不是同一张，后上传的会覆盖掉之前的内容


    文件存储解决方案：
    1） 自己搭建文件存储系统   FastDFS  快速分布式文件存储系统   HDFS  Hadoop分布式文件系统
    2） 选择第三方服务   七牛云存储   www.qiniu.com


    4. 前端js模板 art-template
    https://aui.github.io/art-template/zh-cn/index.html

    5. 数据库优化：

    a. 表结构设计  扩展  查询的快慢
        三范式  https://www.zhihu.com/question/24696366
        设计的时候就考虑可能会用到的查询，为方便查询而设计，比如用空间换时间，适当增加冗余字段节省查询开销

    b. 建索引   主键  唯一(unique)  索引(key   index)  （外键）
        http://www.jianshu.com/p/2b541c028157
        提升 查询速度  复合索引  where k1     k2   k3  k4
        降低   增删改

    c. sql语句优化
        使用索引 注意关键字顺序 最左原则  where

        不要select *

        能使用联合查询，不使用嵌套（子查询）

        select  from tbl_a a inner join tbl_b b on a.field=b.filed where b.=

        select from tbl_a where filed=(select field from tbl_b where b.=)

        能不使用联合查询，尽量不用联合查询

        外键 cascade 级联 （维护外键有额外开销，影响性能）  数据量大的时候，不再使用外键

        使用分析工具分析效率低的sql语句   慢查询工具
        https://flyerboy.github.io/2016/12/23/mysql_slow/
        https://yemengying.com/2016/05/24/mysql-tuning/

    d. 缓存
        redis memcached

    e. 读写分离
        主从热备份       主（写   增删改）  从（查）

    f. 分库分表  水平分库分表
        http://www.infoq.com/cn/articles/key-steps-and-likely-problems-of-split-table


     工作流程
    1.  email
    2.  git   gitlab  账号   rsa
    3.  vpn  虚拟私有网络   阿里云 腾讯云    aws 亚马逊
    4. 数据库


    公司团队有几个人
    我进公司之后负责哪一个业务
    公司使用的技术栈



    https://moshuqi.github.io/2017/07/20/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8/



